'use strict';

var Logger = require('dw/system/Logger');
var Resource = require('dw/web/Resource');

/**
 * @description Validate auth tocken
 *
 * @param {Object} tokenObj - Retrieved  by Salesforce.
 * @returns {boolean} - Indicator of valid token
 */
function isValidAuth(tokenObj) {
    /**
     * @property {String} issued_at Describes the time of generating the token.
     * @property {String} access_token Represents the tokenValue generated by the source system.
     */
    return !(!tokenObj || !tokenObj.access_token || !tokenObj.issued_at);
}

/**
 * @description Returns whether the stored token expired or not
 * @param {Object} tokenObj - The token object retrieved from the auth API response
 * @returns {boolean} - Whether the token is valid
 */
function isAuthTokenExpired(tokenObj) {
    return Boolean(
        !tokenObj ||
		(tokenObj.access_token && tokenObj.expires_at && (Date.now() >= tokenObj.expires_at))
	);
}

/**
 * @description Retrieves a valid OCAPI auth token from storage or from a new auth request
 * @param {boolean} bypassCache - If true, then the token will not be retrieved from the cache
 * @returns {Object} - Plain JS object containing the token response
 */
function readAuthToken(bypassCache) {
    var CacheMgr = require('dw/system/CacheMgr');
    var CACHE_KEY = 'ocapiDataAuthToken';
    var cache = CacheMgr.getCache(CACHE_KEY);
    var ocapiServiceAuth;

    if (bypassCache) {
        cache.invalidate(CACHE_KEY);
    }

    var tokenObj = cache.get(CACHE_KEY, function requestAuthToken() {
        var ocapiAuthService = require('~/cartridge/scripts/services/ocapi/auth');
        var result = ocapiAuthService.call();
        var accessTokenData = result.object;
        if (!empty(accessTokenData)) {
            ocapiServiceAuth = accessTokenData;
            accessTokenData = accessTokenData.tokenObj;
        } else {
            ocapiServiceAuth = {
                error: true,
                serviceError: true,
                errorMessage: result.errorMessage
            };
        }

        return accessTokenData;
    });

    if (!isValidAuth(tokenObj)) {
        ocapiServiceAuth = {
            error: true,
            expired: true,
            errorMessage: Resource.msg('error.ocapi.token.missing', 'common', null)
        };
    }

    if (!ocapiServiceAuth) {
        ocapiServiceAuth = {
            error: false,
            tokenObj: tokenObj
        };
    }

    return ocapiServiceAuth;
}

/**
 * @description Gets a valid token from storage or from a new auth request
 * @returns {Object} - Plain JS object containing the token response
 */
function getAuthToken() {
    var token = readAuthToken(false);

    if (token.error || isAuthTokenExpired(token.tokenObj)) {
        token = readAuthToken(true);
    }

    return token;
}

/**
 * Call OCAPI
 * @param {Object} ocapiReq - Request body.
 * @param {boolean} isBatch - IsBatch.
 * @returns {Object} response
 */
function callOcapiService(ocapiReq, isBatch) {
    var ocapiService = require('~/cartridge/scripts/services/ocapi/rest');
    var OcapiResponse = require('~/cartridge/scripts/util/ocapiUtils/ocapiResponse');
    var Result = require('dw/svc/Result');

    var authToken = getAuthToken();
    var ocapiServiceResult;
    if (!authToken.error && authToken.tokenObj) {
        var args = {
            ocapiEndpointUrl: ocapiReq.ocapiEndpointUrl,
            requestMethod: ocapiReq.httpMethod,
            headers: ocapiReq.headers,
            request: ocapiReq.body,
            accessToken: authToken.tokenObj.access_token
        };
        var result = ocapiService.call(args);
        var ocapiRes;
        if (result && result.ok) {
            var resultObj;
            if (!isBatch) {
                ocapiRes = new OcapiResponse(result.object);
                resultObj = {
                    data: ocapiRes.getObject()
                };
            } else {
                resultObj = {
                    responseList: result.object
                };
            }
            ocapiServiceResult = resultObj;
        } else if (result && result.status !== Result.SERVICE_UNAVAILABLE && result.errorMessage.indexOf('java.net.SocketException') === -1) {
            var errorMessage;
            try {
                errorMessage = JSON.parse(result.errorMessage);
            } catch (e) {
                Logger.error('Error while parsing ocapi error message: {0}#{1}\n{2}\n{3}', e.fileName, e.lineNumber, e.message, e.stack);
            }
            ocapiRes = new OcapiResponse(errorMessage, result.error.toString());
            ocapiServiceResult = ocapiRes.getObject();
        } else if (result.unavailableReason === Result.UNAVAILABLE_TIMEOUT) {
            ocapiServiceResult = {
                error: true,
                serviceError: true,
                data: { errorMessage: Resource.msg('error.ocapi.time.out', 'common', null) }
            };
        } else {
            ocapiServiceResult = {
                error: true,
                serviceError: true,
                data: { errorMessage: result.errorMessage }
            };
        }
    } else {
        ocapiServiceResult = {
            error: true,
            serviceError: true,
            data: { errorMessage: authToken.errorMessage }
        };
    }
    return ocapiServiceResult;
}

/**
 * Check if ocapi response has error and return them
 * @param {Object} ocapiResponse - Ocapi response.
 * @returns {Object} responseError
 */
function getOcapiResponseError(ocapiResponse) {
    var responseError;
    if (ocapiResponse.error && ocapiResponse.data && ocapiResponse.data.errorMessage) {
        responseError = {
            success: false,
            errorMessage: ocapiResponse.data.errorMessage
        };
    } else if (ocapiResponse.error) {
        responseError = {
            success: false,
            errorMessage: Resource.msg('error.technical', 'common', null)
        };
    }
    return responseError;
}
module.exports = {
    callOcapiService: callOcapiService,
    getOcapiResponseError: getOcapiResponseError
};
